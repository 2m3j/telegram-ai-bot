// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	entity "bot/internal/model/ai/conversation/entity"
	context "context"

	mock "github.com/stretchr/testify/mock"

	repository "bot/internal/model/ai/conversation/repository"
)

// MockConversationRepository is an autogenerated mock type for the ConversationRepository type
type MockConversationRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: ctx, e
func (_m *MockConversationRepository) Add(ctx context.Context, e *entity.Conversation) error {
	ret := _m.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Conversation) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByCriteria provides a mock function with given fields: ctx, criteria, sort, limit, offset
func (_m *MockConversationRepository) FindByCriteria(ctx context.Context, criteria repository.ConversationCriteria, sort repository.ConversationSort, limit uint64, offset uint64) ([]*entity.Conversation, error) {
	ret := _m.Called(ctx, criteria, sort, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindByCriteria")
	}

	var r0 []*entity.Conversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ConversationCriteria, repository.ConversationSort, uint64, uint64) ([]*entity.Conversation, error)); ok {
		return rf(ctx, criteria, sort, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ConversationCriteria, repository.ConversationSort, uint64, uint64) []*entity.Conversation); ok {
		r0 = rf(ctx, criteria, sort, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Conversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ConversationCriteria, repository.ConversationSort, uint64, uint64) error); ok {
		r1 = rf(ctx, criteria, sort, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, ID
func (_m *MockConversationRepository) FindById(ctx context.Context, ID entity.ConversationID) (*entity.Conversation, error) {
	ret := _m.Called(ctx, ID)

	if len(ret) == 0 {
		panic("no return value specified for FindById")
	}

	var r0 *entity.Conversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.ConversationID) (*entity.Conversation, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.ConversationID) *entity.Conversation); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Conversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.ConversationID) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOneByCriteria provides a mock function with given fields: ctx, criteria, sort, offset
func (_m *MockConversationRepository) FindOneByCriteria(ctx context.Context, criteria repository.ConversationCriteria, sort repository.ConversationSort, offset uint64) (*entity.Conversation, error) {
	ret := _m.Called(ctx, criteria, sort, offset)

	if len(ret) == 0 {
		panic("no return value specified for FindOneByCriteria")
	}

	var r0 *entity.Conversation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.ConversationCriteria, repository.ConversationSort, uint64) (*entity.Conversation, error)); ok {
		return rf(ctx, criteria, sort, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.ConversationCriteria, repository.ConversationSort, uint64) *entity.Conversation); ok {
		r0 = rf(ctx, criteria, sort, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Conversation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.ConversationCriteria, repository.ConversationSort, uint64) error); ok {
		r1 = rf(ctx, criteria, sort, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, e
func (_m *MockConversationRepository) Update(ctx context.Context, e *entity.Conversation) error {
	ret := _m.Called(ctx, e)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Conversation) error); ok {
		r0 = rf(ctx, e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockConversationRepository creates a new instance of MockConversationRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConversationRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConversationRepository {
	mock := &MockConversationRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
