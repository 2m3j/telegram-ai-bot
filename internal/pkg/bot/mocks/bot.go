// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	bot "bot/internal/pkg/bot"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockBot is an autogenerated mock type for the Bot type
type MockBot struct {
	mock.Mock
}

// SendChatAction provides a mock function with given fields: ctx, chatID, action
func (_m *MockBot) SendChatAction(ctx context.Context, chatID uint64, action bot.ChatAction) {
	_m.Called(ctx, chatID, action)
}

// SendMessage provides a mock function with given fields: ctx, chatID, message
func (_m *MockBot) SendMessage(ctx context.Context, chatID uint64, message string) error {
	ret := _m.Called(ctx, chatID, message)

	if len(ret) == 0 {
		panic("no return value specified for SendMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, string) error); ok {
		r0 = rf(ctx, chatID, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ShowDialog provides a mock function with given fields: ctx, chatID, nodes, startNode
func (_m *MockBot) ShowDialog(ctx context.Context, chatID uint64, nodes []bot.DialogNode, startNode string) error {
	ret := _m.Called(ctx, chatID, nodes, startNode)

	if len(ret) == 0 {
		panic("no return value specified for ShowDialog")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, []bot.DialogNode, string) error); ok {
		r0 = rf(ctx, chatID, nodes, startNode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with given fields: ctx, handler
func (_m *MockBot) Start(ctx context.Context, handler bot.Handler) error {
	ret := _m.Called(ctx, handler)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bot.Handler) error); ok {
		r0 = rf(ctx, handler)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockBot creates a new instance of MockBot. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBot(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBot {
	mock := &MockBot{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
