// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	ai "bot/internal/pkg/ai"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockPlatformProvider is an autogenerated mock type for the PlatformProvider type
type MockPlatformProvider struct {
	mock.Mock
}

// Request provides a mock function with given fields: ctx, model, message, history
func (_m *MockPlatformProvider) Request(ctx context.Context, model string, message string, history []ai.RequestHistory) (string, error) {
	ret := _m.Called(ctx, model, message, history)

	if len(ret) == 0 {
		panic("no return value specified for Request")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []ai.RequestHistory) (string, error)); ok {
		return rf(ctx, model, message, history)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []ai.RequestHistory) string); ok {
		r0 = rf(ctx, model, message, history)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, []ai.RequestHistory) error); ok {
		r1 = rf(ctx, model, message, history)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockPlatformProvider creates a new instance of MockPlatformProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPlatformProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPlatformProvider {
	mock := &MockPlatformProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
